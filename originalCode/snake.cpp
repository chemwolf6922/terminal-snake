#include<iostream>
#include<vector>
#include<windows.h>
#include<conio.h>
#include<time.h>
#include<stdlib.h>
#include<thread>
#include<string>
#include<fstream>
#include<sstream>
using namespace std;


const int mapxl=25,mapyl=30;						//地图大小 
//声明全局变量 
int map[mapxl][mapyl];					 			//地图矩阵 
int mapn=1;											//地图编号
int difficulty=1;									//难度级别 
int applex,appley;									//苹果坐标 
vector<int> snakex;             					 //蛇的位置向量 
vector<int> snakey;
int snakelastx,snakelasty;							//蛇尾消去点的坐标 
int snakenewx,snakenewy;							//蛇头预期点坐标 
int snakel=snakex.size();							//蛇的长度 	
int direction=2;              						 //方向：上1 右2 下3 左4 	
int delaytime=320;									//游戏速度 
bool alive=1;										//死或活 



int main(void)
{
	//函数声明 
	int setsnake(void); 		
	int setdirection(void);
	int snakego(void);
	int startgame(void);
	int setapple(void);
	int HideCursor(void); 
	int endgame(void);
	int newgame(void);
			
	//设置颜色大小隐藏光标 
	system("color 70");
	system("mode con cols=80 lines=35");
	HideCursor();

	while(1)
	{
	//游戏前的准备 

		startgame();
	
		//游戏主体 
		setsnake();
		setapple();
		thread t1(snakego);
		thread t2(setdirection);
		t1.join();
		t2.join();
	
		//跪了以后											
		endgame();
		newgame();
	}
	
}

int HideCursor(void)	//隐藏光标
{
 	CONSOLE_CURSOR_INFO cursor_info = {1, 0}; 
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursor_info);
}


int setsnake(void)				//初始化蛇 
{
	snakelastx=12;
	snakelasty=1;
	for(int i=0;i!=4;i++)                
	{
		snakex.push_back(snakelastx);
		snakey.push_back(snakelasty+1+i);
	}
	snakel=snakex.size();
	snakenewx=snakex[snakel-1];
	snakenewy=snakey[snakel-1];
	for(int i=0;i!=snakel;i++)
	{
		map[snakex[i]][snakey[i]]=2;
	}
}		

int setapple(void)							//产生苹果 				
{
	srand(time(0));
	do
	{
		applex=rand()%(mapxl-2)+1;
		appley=rand()%(mapyl-2)+1;
	}
	while(map[applex][appley]!=0);
	map[applex][appley]=3;					//地图矩阵上的3为苹果
}


int snakego(void)								//线程1：蛇的移动 
{
	int snakemove(void);
	int snakenewpoint(void);
	int setsnakehead(void);
	int snakeonmap(void);
	int setapple(void);
	int graphic(void);
	int eatapple(void);
	int newpointedge(void);	

	while(alive)
	{	
		Sleep(delaytime);
		snakenewpoint();
		if(map[snakenewx][snakenewy]==1)		//撞墙而死 
		{
			alive=0;
			break;
		}
		newpointedge();											
		if((map[snakenewx][snakenewy]==0)|((snakenewx==snakex[0])&(snakenewy==snakey[0])))		//正常移动			
		{
			snakemove();
			setsnakehead();
			snakeonmap();
		}
		else if(map[snakenewx][snakenewy]==3)				//吃苹果 
		{

			eatapple();
			setapple();
		}
		else												//撞自己而死 
		{
			alive=0;
		}
		
		graphic();											//图形输出 
		
	}		
}

int setdirection(void)						//移动方向的确定    
{
	while(alive)
	{		
			int deltax,deltay;	
			char dtemp=getch();
			deltax=snakex[snakel-1]-snakex[snakel-2];
			deltay=snakey[snakel-1]-snakey[snakel-2];
			if((dtemp=='w')&((deltax!=1)&(deltay!=0))&((deltax!=(3-mapxl))&(deltay!=0)))
			{
				direction=1;
			}
			else if((dtemp=='s')&((deltax!=-1)&(deltay!=0))&((deltax!=(mapxl-3))&(deltay!=0)))
			{
				direction=3;
			}
			else if((dtemp=='a')&((deltax!=0)&(deltay!=1))&((deltax!=0)&(deltay!=(3-mapyl))))
			{
				direction=4;
			}
			else if((dtemp=='d')&((deltax!=0)&(deltay!=-1))&((deltax!=0)&(deltay!=(mapyl-3))))
			{
				direction=2;
			}
	}	
}	

int snakemove(void)							//非头节的移动 
{
	snakelastx=snakex[0];
	snakelasty=snakey[0];
	for(int i=0;i!=(snakel-1);i++)
	{
		snakex[i]=snakex[i+1];
		snakey[i]=snakey[i+1];
	}
}

int snakeonmap(void)					//蛇在地图上移动 
{
	map[snakelastx][snakelasty]=0;
	map[snakex[snakel-1]][snakey[snakel-1]]=2;
}


int snakenewpoint(void)					//蛇头的预期点 
{
	switch(direction)		
	{
		case 1:
		{					
			snakenewx=snakex[snakel-1]-1;					
			break;
		}
		case 2:
		{
			snakenewy=snakey[snakel-1]+1;
			break;
		}
		case 3:
		{
			snakenewx=snakex[snakel-1]+1;
			break;
		}
		case 4:
		{
			
			snakenewy=snakey[snakel-1]-1;
			break;
		}
	}
}

int newpointedge(void)				//边界检测及穿越 
{
	if(snakenewx==0)				//左越界 
	{
		snakenewx=mapxl-2;
	}
	else if(snakenewx==(mapxl-1))		//右越界 
	{
		snakenewx=1;
	}
	else if(snakenewy==0)				//上越界 
	{
		snakenewy=mapyl-2;
	}
	else if(snakenewy==(mapyl-1))			//下越界 
	{
		snakenewy=1;
	}	
}

int setsnakehead(void)						//蛇头坐标确定 
{
	snakex[snakel-1]=snakenewx;
	snakey[snakel-1]=snakenewy;
}


int graphic(void)							//图形显示 
{
	string a;
	a+="\n\n\n";
	for(int i=0;i!=mapxl;i++)
	{	
		a+="           ";
		for(int j=0;j!=mapyl;j++)
		{
		
			if((i==0)|(i==(mapxl-1))|(j==0)|(j==(mapyl-1)))
			{

				if(map[i][j]==0)								
				{
					a+="□";							//虫洞 
				}
				else
				{
					a+="▓";							//墙 
				}
			}
			else if(map[i][j]==1)
			{
				a+="▓";
			}
			else if(map[i][j]==2)
			{			
				a+="█";								//蛇 
			}
			else if(map[i][j]==3)
			{
				a+="●";								//苹果 
			}
			else if(map[i][j]==0)
			{
				a+="  ";								//空白 
			}
			else if(map[i][j]==4)						//透明块 
			{
				a+="  ";
			}
		}
		a+="\n";
	}
	system("cls");
	cout<<a;									//这样输出是为了提升画面流畅性 
}


int eatapple(void)				//吃苹果 
{
	snakex.push_back(applex);
	snakey.push_back(appley); 
	snakel=snakex.size();
	map[snakex[snakel-1]][snakey[snakel-1]]=2;
}




int printtanchishe(void)							//打印欢迎界面 
{

	
	system("cls");
	cout<<"\n\n\n\n\n\n\n\n";
	cout<<"                  █                   █                                \n";
	cout<<"                █  █               █████                 █       \n";
	cout<<"              █      █           █                  █        █      \n";
	cout<<"            █    █    █                             █    █████  \n";
	cout<<"                ███                 ███      ██████      █  \n";
	cout<<"                   █        ███        █      █  █  █  █        \n";
	cout<<"              █████     █  █      █        █████  █   █   \n";
	cout<<"              █      █     ███    █              █      ███    \n";
	cout<<"                  █                   █      █      █  █  █        \n";
	cout<<"                █  █                 █      █  █████  █    █  \n";
	cout<<"             ██    ██               ████           █  ████  \n";
	cout<<"\n\n\n";
	cout<<"						1、开始游戏"<<endl;
	cout<<"						2、游戏说明"<<endl;
	cout<<"						3、历史纪录"<<endl;
	cout<<"						4、偏好设置"<<endl; 
	cout<<"						5、退出游戏"<<endl;
}

int startgame(void)				//欢迎界面 
{
	int printtanchishe(void);
	int printinstruction(void);
	int selectmapandspeed(void);
	int readscore(void);
	void preference(void);
	
	printtanchishe();	
		
	char ctemp=0;
	do
	{	
		ctemp=getch();
		switch(ctemp)
		{
			case('1'):
			{
				selectmapandspeed();										//设置游戏地图和速度 
				break;
			}
			case('2'):
			{
				printinstruction();											//游戏说明 
				break;
			}
			case('3'):
			{
				readscore();												//读取分数记录 
				break;
			}
			case('4'):
			{
				preference();												//偏好设置 
				break;													
			}
			case('5'):
			{
				exit(0);													//退出游戏 
			}

		}
	
	}
	while((ctemp!='1')&(ctemp!='2')&(ctemp!='3')&(ctemp!='4'));
}

int selectmapandspeed(void)					//选择游戏速度和地图 
{
	int graphic(void);
	int selectmap(void);
	int startgame(void);
	

	graphic();
	char temp=0;
	while((temp!=13)&(temp!='b'))
	{
		selectmap();
		graphic();
		cout<<endl<<"     *    使用WS选择地图，使用AD选择速度,按回车进入游戏,按B返回    *"<<endl;
		cout<<"                  当前地图为：地图"<<mapn<<endl;
		cout<<"                  当前难度为: "<<difficulty; 
				
		temp=getch();
		switch(temp)
		{
			case('w'):
				{
					if(mapn<10)
					{
						mapn++;						
					}
					break;
				}
			case('s'):
				{
					if(mapn>1)
					{
						mapn--;						
					}
					break;
				}
			case('a'):
				{
					if(difficulty>1)
					{
						difficulty--;						
					}
					break;
				}
			case('d'):
				{
					if(difficulty<6)
					{
						difficulty++;						
					}
					break;
				}
		}
	}
	delaytime=320-50*difficulty;
	if(temp=='b')
	{
		startgame();
	}
}

int printinstruction(void)										//打印说明 
{
	int startgame(void);


	system("cls");
	cout<<endl<<endl<<endl<<endl;
	cout<<"            -------------------------------------------------\n";
	cout<<"            * 游戏说明：                                    *\n";
	cout<<"            *   欢迎来到贪（ka）吃（ping）蛇的世界！        *\n";
	cout<<"            *   在这里，你可以玩出fruit ninja的快感；       *\n";
	cout<<"            *   你也可以体验flappy bird级的虐杀。。。       *\n";
	cout<<"            *   □是神奇的虫洞，它能让你穿越到地图的另一端。*\n";
	cout<<"            *   ▓是坚实的墙壁，它会把你撞翻在地。。。      *\n";
	cout<<"            *   ●是你的目标，不要问我为什么。。。          *\n";
	cout<<"            *   通过WSAD来移动，支持选择地图和速度哦！      *\n";
	cout<<"            *   PS：不要吃了自己。。。                      *\n";
	cout<<"            *                JUST ENJOY IT!!!               *\n"; 
	cout<<"            -------------------------------------------------\n"; 
	cout<<endl<<endl<<endl<<"             按B返回。。。。。。\n";
	char temp=0;
	while(temp!='b')
	{
		temp=getch();
	}
	startgame();
}


int readscore(void)							//读取分数纪录 
{
	vector<string> name;
	vector<int> score;
	vector<int> mapn;
	string nametemp;
	int scoretemp;
	int mapntemp;
	int numofscore;
	char buf[100];
	ifstream myfile;
	myfile.open("hungrysnake_data.wolf");			//打开文件并读取分数 
	while(myfile.getline(buf,100))
	{
		istringstream a(buf);
		a>>nametemp;
		name.push_back(nametemp);
		a>>scoretemp;
		score.push_back(scoretemp);
		a>>mapntemp;
		mapn.push_back(mapntemp);   
	}
	numofscore=name.size() ;
	for(int i=0;i!=numofscore;i++)				//排序 
	{
		for(int j=(i+1);j!=numofscore;j++)
		{
			if(mapn[i]>mapn[j])
			{
				nametemp=name[i];
				name[i]=name[j];
				name[j]=nametemp;
				scoretemp=score[i];
				score[i]=score[j];
				score[j]=scoretemp;
				mapntemp=mapn[i];
				mapn[i]=mapn[j];
				mapn[j]=mapntemp;
			}
			else if(mapn[i]==mapn[j])
			{
				if(score[i]<score[j])
				{
					nametemp=name[i];
					name[i]=name[j];
					name[j]=nametemp;
					scoretemp=score[i];
					score[i]=score[j];
					score[j]=scoretemp;
					mapntemp=mapn[i];
					mapn[i]=mapn[j];
					mapn[j]=mapntemp;
				}
				else if(score[i]==score[j])
				{
					if(name[i]>name[j])
					{
						nametemp=name[i];
						name[i]=name[j];
						name[j]=nametemp;
						scoretemp=score[i];
						score[i]=score[j];
						score[j]=scoretemp;
						mapntemp=mapn[i];
						mapn[i]=mapn[j];
						mapn[j]=mapntemp;
					}
				}
			}
		}
	}
			
	int readmap=1;
	char temp=0;
	while(temp!='b')
	{
		system("cls");
		switch(temp)
		{
			case('a'):if(readmap>1) readmap--;break;
			case('d'):if(readmap<10) readmap++;break;
		}		
		cout<<"\n\n\n               使用AD切换地图\n";
		cout<<"               当前查看地图"<<readmap<<"的纪录。"<<endl;		
	
		int j=0;		
		for(int i=0;i!=numofscore;i++)
		{
			if((mapn[i]==readmap)&(j<9))
			{
				j++;
				cout<<"\t\t\t排名："<<j<<"\t姓名："<<name[i]<<"\t成绩："<<score[i]<<endl;
			}
		}				
		cout<<"\n\n\n\n\n             按B返回。。。。。。\n";		
		temp=getch();
	}
	startgame();	
}

int printgameover(void)									//打印游戏结束 
{

	system("cls");
	
	cout<<endl<<endl<<endl<<endl;
	cout<<"                ●●●●●    ●●●●●    ●      ●    ●●●●●\n";
	cout<<"                ●            ●      ●    ●●  ●●    ●        \n";
	cout<<"                ●            ●      ●    ● ●● ●    ●        \n";
	cout<<"                ●    ●●    ●●●●●    ●  ●  ●    ●●●●●\n";
	cout<<"                ●      ●    ●      ●    ●  ●  ●    ●        \n";
	cout<<"                ●      ●    ●      ●    ●      ●    ●        \n";
	cout<<"                ●●●●●    ●      ●    ●      ●    ●●●●●\n";
	cout<<endl<<endl;
	cout<<"                ●●●●●    ●      ●    ●●●●●    ●●●●  \n";
	cout<<"                ●      ●    ●      ●    ●            ●    ●  \n";
	cout<<"                ●      ●    ●      ●    ●            ●    ●  \n";
	cout<<"                ●      ●     ●    ●     ●●●●●    ●●●●  \n";
	cout<<"                ●      ●      ●  ●      ●            ● ●     \n";
	cout<<"                ●      ●       ●●       ●            ●   ●   \n";
	cout<<"                ●●●●●        ●        ●●●●●    ●    ●●\n";
}



int endgame(void)						//游戏结束后处理 
{
	string name="";
	int printgameover(void);
	system("cls");
	printgameover();
	cout<<endl<<endl;
	cout<<"               本局的分数为："<<snakel<<endl;
	cout<<"               敢问壮士尊姓大名？";
	cin>>name;
	ofstream myfile;
	myfile.open("hungrysnake_data.wolf",ios::app);
	myfile<<endl<<name<<" "<<snakel<<" "<<mapn;
	myfile.close();
}

int newgame(void)							//初始化设置 
{
	int selectmap(void);
	vector<int>().swap(snakex);
	vector<int>().swap(snakey);
	direction=2;
	delaytime=620;
	alive=1;
	selectmap();
}

void preference(void)													//设置颜色 
{
	int graphic(void);
	int startgame(void);
	char temp=0;
	string color="";
	char colortemp1='7';
	char colortemp2='0';
	while(temp!='b')
	{
		graphic();
		cout<<"\n\n\t\t使用WS调整背景色，使用AD调整前景色，按B返回。\n";
		temp=getch();
		switch(temp)
		{
			case 'w':
			{
				if(colortemp1<('0'+15))
				{
					colortemp1++;				
				}
				break;
			}
			case 's':
			{
				if(colortemp1>'0')
				{
					colortemp1--;					
				}
				break;
			}
			case 'a':
			{
				if(colortemp2>'0')
				{
					colortemp2--;					
				}
				break;
			}
			case 'd':
			{
				if(colortemp2<('0'+15))
				{
					colortemp2++;					
				}
				break;
			}
		}
		
		
		string stemp1;
		if(colortemp1>'9')
		{
			stemp1=colortemp1+7;
		}
		else
		{
			stemp1=colortemp1;
		}
		string stemp2;
		if(colortemp2>'9')
		{
			stemp2=colortemp2+7;
		}
		else 
		{
			stemp2=colortemp2;
		}		
		color="color "+stemp1+stemp2;
		const char* ctemp=color.data() ;
		system(ctemp);
	}
	
	startgame();
}


//地图 

int selectmap(void)							//选择地图 
{
	int map_1(void);
	int map_2(void);
	int map_3(void);
	int map_4(void);
	int map_5(void);
	int map_6(void);
	int map_7(void);
	int map_8(void);
	int map_9(void);
	int map_10(void);
	
	switch(mapn)
	{
		case 1:map_1();break;
		case 2:map_2();break;
		case 3:map_3();break;
		case 4:map_4();break;
		case 5:map_5();break;
		case 6:map_6();break;
		case 7:map_7();break;
		case 8:map_8();break;
		case 9:map_9();break;
		case 10:map_10();break;
	}
}

int map_1(void)						//地图1
{
	for(int i=0;i!=mapxl;i++)
	{
		for(int j=0;j!=mapyl;j++)
		{
			map[i][j]=0;
		}
	}
}

int map_2(void)						//地图2 
{
	for(int i=0;i!=mapxl;i++)
	{
		for(int j=0;j!=mapyl;j++)
		{
			map[i][j]=1;
		}
	}
	for(int i=1;i!=(mapxl-1);i++)
	{
		for(int j=1;j!=(mapyl-1);j++)
		{
			map[i][j]=0;
		}
	}
}

int map_3(void)							//地图3 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},//1
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//2
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//3
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//4
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//5
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//6
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//7
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//8
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//9
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//10
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//11
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//13 !!!空 
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//14
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//15
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//16
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//17
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//18
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//19
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//20
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//21
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//22
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//23
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//24
		{1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}

int map_4(void)							//地图4 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
		{0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0},//5
		{0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0},//6
		{0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0},//7
		{0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0},//8
		{0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0},//9
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//10
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//11
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//13 !!!空 
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//14
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//15
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//16
		{0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0},//17
		{0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0},//18
		{0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0},//19
		{0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0},//20
		{0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0},//21
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//22
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//23
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//24
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}

int map_5(void)								//地图5 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},//1
		{0,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,0},//2
		{0,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,0},//3
		{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},//4
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//5
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//6
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//7
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//8
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//9
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//10
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//11
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//12
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//13 !!!空 
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//14
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//15
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//16
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//17
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//18
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//19
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//20
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},//21
		{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},//22
		{0,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,0},//23
		{0,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,0},//24
		{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}

int map_6(void)							//地图6 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//5
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//6
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//7
		{1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},//8
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//10
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//11
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//13 !!!空 
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//14
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//15
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//16
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//17
		{1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},//18
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//19
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//20
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//21
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//22
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//23
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//24
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}

int map_7(void)								//地图7 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//1
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//2
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//3
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//4
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//5
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//6
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//7
		{1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//8
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//10
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//11
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//13 !!!空 
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//14
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//15
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//16
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//17
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},//18
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//19
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//20
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//21
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//22
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//23
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//24
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}


int map_8(void)								//地图8 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//5
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//6
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//7
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//8
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//10
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//11
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//13 !!!空 
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//14
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//15
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//16
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//17
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//18
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//19
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//20
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//21
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//22
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//23
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//24
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}

int map_9(void)								//地图9 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
		{0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0},//4
		{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//5
		{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//6
		{0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0},//7
		{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//8
		{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//9
		{0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0},//10
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//11
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//13 !!!空 
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//14
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//15
		{0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0},//16
		{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//17
		{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//18
		{0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0},//19
		{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//20
		{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},//21
		{0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0},//22
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//23
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//24
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}

int map_10(void)								//地图10 
{
	int map_temp[25][30]=
	{
	//   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0	
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
		{0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0},//4
		{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,4,4,4,4,1,0,0,0,0},//5
		{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,4,4,4,4,1,0,0,0,0},//6
		{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,4,4,4,4,1,0,0,0,0},//7
		{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,4,4,4,4,1,0,0,0,0},//8
		{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,4,4,4,4,1,0,0,0,0},//9
		{0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0},//10
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//11
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//13 !!!空 
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//14
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//15
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},//16
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//17
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//18
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},//19
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//20
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//21
		{0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},//22
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//23
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//24
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//25	
	};
	memcpy(map,map_temp,sizeof(map_temp));
}
